# Base image
FROM node:18

# Create app directory
WORKDIR /usr/src/app

# A wildcard is used to ensure both package.json AND package-lock.json are copied
COPY package*.json ./

# Install app dependencies
RUN npm install

# Bundle app source
COPY . .

# Copy the .env and .env.development files
# COPY .env .env.development ./

# Creates a "dist" folder with the production build
RUN npm run build

# Expose the port on which the app will run
EXPOSE 3000

# Start the server using the production build
CMD ["npm", "run", "start:prod"]

# # Building layer
# FROM node:18 as development

# # Optional NPM automation (auth) token build argument
# # ARG NPM_TOKEN

# # Optionally authenticate NPM registry
# # RUN npm set //registry.npmjs.org/:_authToken ${NPM_TOKEN}

# WORKDIR /app

# # Copy configuration files
# COPY tsconfig*.json ./
# COPY package*.json ./

# # Install dependencies from package-lock.json, see https://docs.npmjs.com/cli/v7/commands/npm-ci
# RUN npm ci

# # Copy application sources (.ts, .tsx, js)
# COPY src/ src/

# # Build application (produces dist/ folder)
# RUN npm run build

# # Runtime (production) layer
# FROM node:18 as production

# # Optional NPM automation (auth) token build argument
# # ARG NPM_TOKEN

# # Optionally authenticate NPM registry
# # RUN npm set //registry.npmjs.org/:_authToken ${NPM_TOKEN}

# WORKDIR /app

# # Copy dependencies files
# COPY package*.json ./

# # Install runtime dependecies (without dev/test dependecies)
# RUN npm ci --omit=dev

# # Copy production build
# COPY --from=development /app/dist/ ./dist/

# # Expose application port
# EXPOSE 3000

# # Start application
# CMD [ "node", "dist/main.js" ]